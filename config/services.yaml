# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    redis.url: '%env(resolve:REDIS_URL)%'
    disable.cache: '%env(resolve:DISABLE_CACHE)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $disableCache: '%disable.cache%'
            $redisClient: '@redis.adapter.client'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    'App\Decorator\SwaggerDecorator':
        decorates: 'api_platform.swagger.normalizer.documentation'
        arguments: [ '@App\Decorator\SwaggerDecorator.inner' ]
        autoconfigure: false

    App\DataPersister\UserDataPersister:
        decorates: 'api_platform.doctrine.orm.data_persister'

    App\DataPersister\NotationDataPersister:
        decorates: 'api_platform.doctrine.orm.data_persister'

    # redis adapter
    redis.adapter:
        public: false
        class: Symfony\Component\Cache\Adapter\RedisAdapter
        arguments:
            $redisClient: '@redis.adapter.client'

    redis.adapter.client:
        public: false
        class: Predis\Client
        factory: ['Symfony\Component\Cache\Adapter\RedisAdapter', 'createConnection']
        arguments:
            $dsn: '%redis.url%'
            $options:
                $compression: true
                $redis_cluster: true
                $lazy: false
                $persistent: 1
                $persistent_id: null
                $tcp_keepalive: 0
                $timeout: 30
                $read_timeout: 0
                $retry_interval: 0